name: CD

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  django-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build docker
        run: docker compose -f local.docker-compose.yml build

      - name: Migration test database
        run: docker compose -f local.docker-compose.yml run django poetry run python manage.py migrate

      - name: Run isort
        run: docker compose -f local.docker-compose.yml run django poetry run isort euss_ya_apps/ --check

      - name: Run black
        run: docker compose -f local.docker-compose.yml run django poetry run black euss_ya_apps/ --check

      - name: Run flake8
        run: docker compose -f local.docker-compose.yml run django poetry run flake8

      - name: Run mypy
        run: docker compose -f local.docker-compose.yml run django poetry run mypy --config mypy.ini euss_ya_apps/

      - name: Run tests
        run: docker compose -f local.docker-compose.yml run django poetry run py.test

  docker-build:
    needs: django-test
    runs-on: ubuntu-latest
    steps:
    - name: Docker meta
      id: docker_meta
      uses: crazy-max/ghaction-docker-meta@v1
      with:
        images: wogur981208/django
        tag-semver: |
          {{version}}
          {{major}}.{{minor}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        file: ./docker/prod.Dockerfile
        platform: linux/amd64
        push: true
        tags: ${{ steps.docker_meta.outputs.tags }}
        labels: ${{ steps.docker_meta.outputs.labels }}

  deploy-to-ec2:
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          host: ${{ secrets.AWS_EC2_IP }}
          username: ${{ secrets.AWS_EC2_NAME }}
          port: ${{ secrets.AWS_EC2_PORT }}
          script: |
            sh deploy.sh
